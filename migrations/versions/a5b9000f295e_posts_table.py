"""posts table

Revision ID: a5b9000f295e
Revises: e32dd245038a
Create Date: 2020-09-28 19:49:40.126045

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a5b9000f295e'
down_revision = 'e32dd245038a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    posts = op.create_table('post',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=140), nullable=True),
    sa.Column('body', sa.String(length=1400), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['userr.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_post_timestamp'), 'post', ['timestamp'], unique=False)
    # ### end Alembic commands ###

    op.bulk_insert(posts,
                   [
                       {
                           'id': 1,
                           'title': 'intro',
                           'body': '## intro\n\nthis is web service application template that uses following stack:\n * **Python (flask)**\n* **ReacJS** (functional components)\n'
                                   '* **Redux** and **react-redux**\n* **PostgreSQL**\n* **Docker** and **docker-compose**\n* **GitlabCI**\n\n'
                                   'Main idea of that template is using it as starting point for rapid development web services.\n'
                                   'Implements basic authorization/authentication functionality using `JWT tokens`.\n',
                           'user_id': 1
                       },
                       {
                           'id': 2,
                           'title': 'backend',
                           'body': '## backend\n\nis based on **Flask** framework. Gives highest level of flexibility on choosing tools and technologies for '
                                   'web applications development.\n\n Used extensions:\n* **flask-sqlalchemy**\n* **flask-migrate**\n* **flask_restful**\n* **flask_jwt_extended**\n\n'
                                   'authentication implemented using `JWT tokens`. All authorization/authentication related information stored in database\n\n'
                                   'default user `guest/guest1` implemented to lauhch it out of box.',
                           'user_id': 1
                       },
                       {
                           'id': 3,
                           'title': 'frontend',
                           'body': '## frontend\n\ndeveloped using ReactJS. Used just as the most popular framework that gives ability to develop flexible '
                                   'SPA in short time.\n\n'
                                   'Build system:\n* **npm**\n* **webpack**\n* **babel**\n\n'
                                   'used components library:\n* **material-ui**\n\n'
                                   'served on backend as static prebuilt single `index.html` file.\n\n'
                                   'used technologies:\n* **redux** and **react-redux** to store state of all components at single place\n'
                                   '* **route** to implement Front side URL navigation\n'
                                   '* **local storage** to store JWT tokens.\n'
                                   '* **redux-logger** for development purposes',
                           'user_id': 1
                       },
                       {
                           'id': 4,
                           'title': 'database',
                           'body': '## database\n\n**Postgresql** used as main SQL database to store data. '
                                   'There was no serious reason to use exactly PostgreSQL. This is just what used historically. '
                                   'Database migration (`flask db`) implemented to simplify deploy and future schema updating processes.\n\n'
                                   '#### DB schema:\n- table `alembic_version` with following fields:\n  - version_num\n- table `userr` with '
                                   'following fields:\n  - id\n  - username\n  - email\n  - password_hash\n- table `post` with following fields:\n  - id\n'
                                   '  - title\n  - body\n  - timestamp\n  - user_id\n'
                                   '- table `revoked_tokens` with following fields:\n  - id\n  - jti\n',
                           'user_id': 1
                       },
                       {
                           'id': 5,
                           'title': 'devops',
                           'body': '## devops\n\n**docker** and **docker-compose** used for containerization.`Dockerfile` and `docker-compose.yml` '
                                   'can be found in root folder of project\n',
                           'user_id': 1
                       },
                       {
                           'id': 6,
                           'title': 'ci/cd',
                           'body': '## ci/cd\n\ndeploy automatization using `gitlab runners` implemented. `.gitlab-ci.yml` file can be found in root folder of project.',
                           'user_id': 1
                       },
                       {
                           'id': 7,
                           'title': 'project structure',
                           'body': '## project structure\n\n- **application.py** is entrypoint for flask backend. All backend related sources placed in **/app** folder.\n'
                                   '- **/migrations** - folder used by `flask db` to migrate database. In a case of any future database changes '
                                   'dont forget to make related changes using `flask db migrate` to register changes in db.'
                                   'try to divide changes in db to small logically separated chunks like you do it on merge requests using git.\n'
                                   '- **/ui** - contains ReactJS based Frontend UI project.\n'
                                   '- **/static_** - contains prebuilt frontend SPA page generated using `make ui-build` command.\n'
                                   '- **Dockerfile**, **docker-compose.yml**, **entrypoint.sh**, **Makefile**, **wait-for-it.sh** used for deploying using docker containers.\n'
                                   '- **requirements.txt** - contains list of used python packets. Similar for fronted can be found in **/ui/package.json**.\n',
                           'user_id': 1
                       },
                       {
                           'id': 8,
                           'title': 'to-do',
                           'body': '## to-do\n\n* implement failed requests handling.\n'
                                   '* add registration UI form to implement email verification based users registration.\n'
                                   '* add `GraphQL` or `Swagger` to simplify syncronization between backend and frontend during API development. \n'
                                   '* add `react native` template to this project that uses same source base with existing reactJS project and'
                                   'compatible with existing backend and database schema as starting point on mobile application development.\n',
                           'user_id': 1
                       },
                       {
                           'id': 9,
                           'title': 'user manual',
                           'body': '## user manual\n\n* run `docker-compose up` from root folder of project and access `http://localhost:8888/` using browser. '
                                   'Use `guest/guest1` credentials to login.\n'
                                   '* to run without docker: `make ui-install && make ui-build && flask run`. But you must setup correct environment variables '
                                   'shown in `database.conf` file to access your local **postgresql** database.\n'
                                   '* to register new user you can use curl example from `curl_examples.txt` file.\n',
                           'user_id': 1
                       },
                       {
                           'id': 10,
                           'title': 'security',
                           'body': '## security\n\nDont place `database.conf` file under git version control. Find another way to deliver environment variables to ' 
                                   '`production` and `development` machines.\n',
                           'user_id': 1
                       },
                   ])



def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_post_timestamp'), table_name='post')
    op.drop_table('post')
    # ### end Alembic commands ###
